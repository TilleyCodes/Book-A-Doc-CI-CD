name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      target_commit:
        description: 'Target commit SHA to rollback to (leave empty for previous deployment)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: book-a-doc
  REGION: australia-southeast1

jobs:
  # Job 1: Validate rollback request
  validate:
    runs-on: ubuntu-latest
    outputs:
      target-sha: ${{ steps.determine-target.outputs.sha }}
      frontend-image: ${{ steps.determine-target.outputs.frontend_image }}
      backend-image: ${{ steps.determine-target.outputs.backend_image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine target commit
        id: determine-target
        run: |
          if [ -n "${{ github.event.inputs.target_commit }}" ]; then
            TARGET_SHA="${{ github.event.inputs.target_commit }}"
          else
            # Get the previous successful deployment
            TARGET_SHA=$(git log --oneline --grep="deployment.*success" -n 2 | tail -n 1 | cut -d' ' -f1)
          fi
          
          echo "sha=$TARGET_SHA" >> $GITHUB_OUTPUT
          echo "frontend_image=gcr.io/${{ env.PROJECT_ID }}/book-a-doc-frontend:$TARGET_SHA" >> $GITHUB_OUTPUT
          echo "backend_image=gcr.io/${{ env.PROJECT_ID }}/book-a-doc-backend:$TARGET_SHA" >> $GITHUB_OUTPUT
          
          echo "Rolling back to commit: $TARGET_SHA"

      - name: Verify target images exist
        run: |
          gcloud auth configure-docker
          
          # Check if images exist
          if ! docker pull ${{ steps.determine-target.outputs.frontend_image }}; then
            echo "Frontend image not found for target commit"
            exit 1
          fi
          
          if ! docker pull ${{ steps.determine-target.outputs.backend_image }}; then
            echo "Backend image not found for target commit"
            exit 1
          fi
          
          echo "Target images verified"

  # Job 2: Create backup of current deployment
  backup:
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Backup current deployment
        run: |
          # Get current image tags
          CURRENT_FRONTEND=$(gcloud run services describe ${{ env.SERVICE_NAME }}-frontend --region ${{ env.REGION }} --format 'value(spec.template.spec.template.spec.containers[0].image)')
          CURRENT_BACKEND=$(gcloud run services describe ${{ env.SERVICE_NAME }}-backend --region ${{ env.REGION }} --format 'value(spec.template.spec.template.spec.containers[0].image)')
          
          # Create backup tags
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          
          gcloud container images add-tag $CURRENT_FRONTEND gcr.io/${{ env.PROJECT_ID }}/book-a-doc-frontend:$BACKUP_TAG
          gcloud container images add-tag $CURRENT_BACKEND gcr.io/${{ env.PROJECT_ID }}/book-a-doc-backend:$BACKUP_TAG
          
          echo "Backup created with tag: $BACKUP_TAG"
          echo "backup_tag=$BACKUP_TAG" >> $GITHUB_ENV

      - name: Store backup metadata
        run: |
          echo "{
            \"backup_tag\": \"${{ env.backup_tag }}\",
            \"environment\": \"${{ github.event.inputs.environment }}\",
            \"rollback_reason\": \"${{ github.event.inputs.reason }}\",
            \"rollback_initiated_by\": \"${{ github.actor }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"target_commit\": \"${{ needs.validate.outputs.target-sha }}\"
          }" > rollback-metadata.json

      - name: Upload backup metadata
        uses: actions/upload-artifact@v3
        with:
          name: rollback-metadata
          path: rollback-metadata.json

  # Job 3: Execute rollback
  rollback:
    runs-on: ubuntu-latest
    needs: [validate, backup]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Rollback backend service
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-backend \
            --image ${{ needs.validate.outputs.backend-image }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --quiet

      - name: Rollback frontend service
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-frontend \
            --image ${{ needs.validate.outputs.frontend-image }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --quiet

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for services to stabilize..."
          sleep 30

  # Job 4: Verify rollback
  verify:
    runs-on: ubuntu-latest
    needs: [rollback]
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get service URLs
        id: get-urls
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-frontend --region ${{ env.REGION }} --format 'value(status.url)')
          BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-backend --region ${{ env.REGION }} --format 'value(status.url)')
          
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

      - name: Run health checks
        run: |
          # Test backend health
          if ! curl -f ${{ steps.get-urls.outputs.backend_url }}/health; then
            echo "Backend health check failed"
            exit 1
          fi
          
          # Test frontend accessibility
          if ! curl -f ${{ steps.get-urls.outputs.frontend_url }}; then
            echo "Frontend accessibility check failed"
            exit 1
          fi
          
          echo "All health checks passed"

      - name: Run basic functionality tests
        run: |
          # Test critical API endpoints
          curl -f ${{ steps.get-urls.outputs.backend_url }}/api/health || exit 1
          
          echo "Basic functionality verified"

  # Job 5: Cleanup and notify
  cleanup:
    runs-on: ubuntu-latest
    needs: [validate, rollback, verify]
    if: always()
    steps:
      - name: Create rollback summary
        run: |
          echo "## Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Commit:** ${{ needs.validate.outputs.target-sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.verify.result }}" = "success" ]; then
            echo "Rollback completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Services have been restored to a previous stable state." >> $GITHUB_STEP_SUMMARY
          else
            echo "Rollback failed or verification unsuccessful." >> $GITHUB_STEP_SUMMARY
            echo "Manual intervention may be required."