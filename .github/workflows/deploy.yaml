name: Deploy to AWS

on:
  workflow_run:
    workflows: ["Build and Test"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only deploy if build was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Create ECS cluster if it doesn't exist
      - name: Create ECS cluster
        run: |
          aws ecs create-cluster --cluster-name book-a-doc-cluster || echo "Cluster already exists"

      # Create task execution role
      - name: Create ECS task role
        run: |
          # Check if role exists
          if ! aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null; then
            echo "Creating ECS task execution role..."
            aws iam create-role \
              --role-name ecsTaskExecutionRole \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
            
            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          fi

      # Store secrets in AWS Parameter Store
      - name: Store application secrets
        run: |
          aws ssm put-parameter \
            --name "/book-a-doc/mongodb-uri" \
            --value "${{ secrets.MONGODB_URI }}" \
            --type "SecureString" \
            --overwrite || true
          
          aws ssm put-parameter \
            --name "/book-a-doc/jwt-secret" \
            --value "${{ secrets.JWT_SECRET }}" \
            --type "SecureString" \
            --overwrite || true

      # Deploy backend service
      - name: Deploy backend to ECS
        run: |
          # Create backend task definition
          cat > backend-task-def.json << EOF
          {
            "family": "book-a-doc-backend",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "${{ env.ECR_REGISTRY }}/book-a-doc-backend:latest",
                "portMappings": [{"containerPort": 3000}],
                "environment": [
                  {"name": "NODE_ENV", "value": "production"},
                  {"name": "PORT", "value": "3000"}
                ],
                "secrets": [
                  {
                    "name": "MONGODB_URI",
                    "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/book-a-doc/mongodb-uri"
                  },
                  {
                    "name": "JWT_SECRET",
                    "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/book-a-doc/jwt-secret"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/book-a-doc-backend",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          # Create log group
          aws logs create-log-group --log-group-name "/ecs/book-a-doc-backend" || true
          
          # Register task definition
          aws ecs register-task-definition --cli-input-json file://backend-task-def.json
          
          # Get default VPC and subnets
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:2].SubnetId' --output text | tr '\t' ',')
          
          # Create or update service
          if aws ecs describe-services --cluster book-a-doc-cluster --services book-a-doc-backend --query 'services[0]' --output text | grep -q "book-a-doc-backend"; then
            echo "Updating existing backend service..."
            aws ecs update-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-backend \
              --task-definition book-a-doc-backend
          else
            echo "Creating new backend service..."
            aws ecs create-service \
              --cluster book-a-doc-cluster \
              --service-name book-a-doc-backend \
              --task-definition book-a-doc-backend \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],assignPublicIp=ENABLED}"
          fi

      # Deploy frontend service
      - name: Deploy frontend to ECS
        run: |
          # Create frontend task definition
          cat > frontend-task-def.json << EOF
          {
            "family": "book-a-doc-frontend",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "${{ env.ECR_REGISTRY }}/book-a-doc-frontend:latest",
                "portMappings": [{"containerPort": 80}],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/book-a-doc-frontend",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          # Create log group
          aws logs create-log-group --log-group-name "/ecs/book-a-doc-frontend" || true
          
          # Register task definition
          aws ecs register-task-definition --cli-input-json file://frontend-task-def.json
          
          # Get default VPC and subnets
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:2].SubnetId' --output text | tr '\t' ',')
          
          # Create or update service
          if aws ecs describe-services --cluster book-a-doc-cluster --services book-a-doc-frontend --query 'services[0]' --output text | grep -q "book-a-doc-frontend"; then
            echo "Updating existing frontend service..."
            aws ecs update-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-frontend \
              --task-definition book-a-doc-frontend
          else
            echo "Creating new frontend service..."
            aws ecs create-service \
              --cluster book-a-doc-cluster \
              --service-name book-a-doc-frontend \
              --task-definition book-a-doc-frontend \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],assignPublicIp=ENABLED}"
          fi

      # Wait for deployment to complete
      - name: Wait for services to be stable
        run: |
          echo "Waiting for backend service to stabilise..."
          aws ecs wait services-stable --cluster book-a-doc-cluster --services book-a-doc-backend
          
          echo "Waiting for frontend service to stabilise..."
          aws ecs wait services-stable --cluster book-a-doc-cluster --services book-a-doc-frontend
          
          echo "Deployment completed successfully!"

      # Test the deployment
      - name: Test deployment
        run: |
          echo "Testing if services are running..."
          
          # Get task info to find public IPs
          BACKEND_TASK=$(aws ecs list-tasks --cluster book-a-doc-cluster --service-name book-a-doc-backend --query 'taskArns[0]' --output text)
          FRONTEND_TASK=$(aws ecs list-tasks --cluster book-a-doc-cluster --service-name book-a-doc-frontend --query 'taskArns[0]' --output text)
          
          if [ "$BACKEND_TASK" != "None" ] && [ "$FRONTEND_TASK" != "None" ]; then
            echo "Both services are running!"
            echo "Backend task: $BACKEND_TASK"
            echo "Frontend task: $FRONTEND_TASK"
          else
            echo "Some services failed to start"
            exit 1
          fi
          