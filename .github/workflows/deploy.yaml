name: Deploy to AWS

on:
  workflow_run:
    workflows: ["Build and Test"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only deploy if build was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Create ECS cluster if it doesn't exist
      - name: Create ECS cluster
        run: |
          aws ecs create-cluster --cluster-name book-a-doc-cluster || echo "Cluster already exists"

      # Create task execution role
      - name: Create ECS task role
        run: |
          # Check if role exists
          if ! aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null; then
            echo "Creating ECS task execution role..."
            aws iam create-role \
              --role-name ecsTaskExecutionRole \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
            
            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
            
            # Wait a bit for role to be ready
            sleep 10
          fi

      # Store secrets in AWS Parameter Store
      - name: Store application secrets
        run: |
          aws ssm put-parameter \
            --name "/book-a-doc/mongodb-uri" \
            --value "${{ secrets.MONGODB_URI }}" \
            --type "SecureString" \
            --overwrite || true
          
          aws ssm put-parameter \
            --name "/book-a-doc/jwt-secret" \
            --value "${{ secrets.JWT_SECRET }}" \
            --type "SecureString" \
            --overwrite || true

      # Create security groups for network access
      - name: Create security groups
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          
          # Create backend security group
          BACKEND_SG=$(aws ec2 create-security-group \
            --group-name book-a-doc-backend-sg \
            --description "Security group for backend" \
            --vpc-id $VPC_ID \
            --query 'GroupId' --output text 2>/dev/null || \
            aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=book-a-doc-backend-sg" \
              --query 'SecurityGroups[0].GroupId' --output text)
          
          # Allow HTTP traffic
          aws ec2 authorize-security-group-ingress \
            --group-id $BACKEND_SG \
            --protocol tcp \
            --port 3000 \
            --cidr 0.0.0.0/0 2>/dev/null || true
          
          # Create frontend security group
          FRONTEND_SG=$(aws ec2 create-security-group \
            --group-name book-a-doc-frontend-sg \
            --description "Security group for frontend" \
            --vpc-id $VPC_ID \
            --query 'GroupId' --output text 2>/dev/null || \
            aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=book-a-doc-frontend-sg" \
              --query 'SecurityGroups[0].GroupId' --output text)
          
          # Allow HTTP traffic
          aws ec2 authorize-security-group-ingress \
            --group-id $FRONTEND_SG \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0 2>/dev/null || true
          
          echo "BACKEND_SG=$BACKEND_SG" >> $GITHUB_ENV
          echo "FRONTEND_SG=$FRONTEND_SG" >> $GITHUB_ENV

      # Deploy backend service
      - name: Deploy backend to ECS
        run: |
          # Create backend task definition
          cat > backend-task-def.json << EOF
          {
            "family": "book-a-doc-backend",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "${{ env.ECR_REGISTRY }}/book-a-doc-backend:latest",
                "portMappings": [{"containerPort": 3000}],
                "environment": [
                  {"name": "NODE_ENV", "value": "production"},
                  {"name": "PORT", "value": "3000"}
                ],
                "secrets": [
                  {
                    "name": "MONGODB_URI",
                    "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/book-a-doc/mongodb-uri"
                  },
                  {
                    "name": "JWT_SECRET",
                    "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/book-a-doc/jwt-secret"
                  }
                ],
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                },
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/book-a-doc-backend",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          # Create log group
          aws logs create-log-group --log-group-name "/ecs/book-a-doc-backend" || true
          
          # Register task definition
          aws ecs register-task-definition --cli-input-json file://backend-task-def.json
          
          # Get default VPC and subnets
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:2].SubnetId' --output text | tr '\t' ',')
          
          # Stop existing service first if it exists
          if aws ecs describe-services --cluster book-a-doc-cluster --services book-a-doc-backend --query 'services[0]' --output text | grep -q "book-a-doc-backend"; then
            echo "Stopping existing backend service..."
            aws ecs update-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-backend \
              --desired-count 0
            
            echo "Waiting for service to stop..."
            aws ecs wait services-stable --cluster book-a-doc-cluster --services book-a-doc-backend --cli-read-timeout 300 || true
            
            echo "Deleting existing service..."
            aws ecs delete-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-backend || true
            
            sleep 30
          fi
          
          echo "Creating new backend service..."
          aws ecs create-service \
            --cluster book-a-doc-cluster \
            --service-name book-a-doc-backend \
            --task-definition book-a-doc-backend \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$BACKEND_SG],assignPublicIp=ENABLED}"

      # Wait for backend with shorter timeout
      - name: Wait for backend service
        run: |
          echo "Waiting for backend service to start..."
          timeout 300 aws ecs wait services-stable --cluster book-a-doc-cluster --services book-a-doc-backend || {
            echo "Backend service didn't stabilise in time, checking status..."
            aws ecs describe-services --cluster book-a-doc-cluster --services book-a-doc-backend
            
            # Get task details for debugging
            TASK_ARN=$(aws ecs list-tasks --cluster book-a-doc-cluster --service-name book-a-doc-backend --query 'taskArns[0]' --output text)
            if [ "$TASK_ARN" != "None" ]; then
              echo "Task details:"
              aws ecs describe-tasks --cluster book-a-doc-cluster --tasks $TASK_ARN
            fi
            
            echo "Continuing with deployment despite timeout..."
          }

      # Deploy frontend service
      - name: Deploy frontend to ECS
        run: |
          # Create frontend task definition
          cat > frontend-task-def.json << EOF
          {
            "family": "book-a-doc-frontend",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "${{ env.ECR_REGISTRY }}/book-a-doc-frontend:latest",
                "portMappings": [{"containerPort": 80}],
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost/ || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                },
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/book-a-doc-frontend",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          # Create log group
          aws logs create-log-group --log-group-name "/ecs/book-a-doc-frontend" || true
          
          # Register task definition
          aws ecs register-task-definition --cli-input-json file://frontend-task-def.json
          
          # Get default VPC and subnets
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:2].SubnetId' --output text | tr '\t' ',')
          
          # Stop existing service first if it exists
          if aws ecs describe-services --cluster book-a-doc-cluster --services book-a-doc-frontend --query 'services[0]' --output text | grep -q "book-a-doc-frontend"; then
            echo "Stopping existing frontend service..."
            aws ecs update-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-frontend \
              --desired-count 0
            
            echo "Waiting for service to stop..."
            aws ecs wait services-stable --cluster book-a-doc-cluster --services book-a-doc-frontend --cli-read-timeout 300 || true
            
            echo "Deleting existing service..."
            aws ecs delete-service \
              --cluster book-a-doc-cluster \
              --service book-a-doc-frontend || true
            
            sleep 30
          fi
          
          echo "Creating new frontend service..."
          aws ecs create-service \
            --cluster book-a-doc-cluster \
            --service-name book-a-doc-frontend \
            --task-definition book-a-doc-frontend \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$FRONTEND_SG],assignPublicIp=ENABLED}"

      # Test the deployment with better error handling
      - name: Test deployment
        run: |
          echo "Checking if services are running..."
          
          # Check backend
          BACKEND_TASK=$(aws ecs list-tasks --cluster book-a-doc-cluster --service-name book-a-doc-backend --query 'taskArns[0]' --output text)
          FRONTEND_TASK=$(aws ecs list-tasks --cluster book-a-doc-cluster --service-name book-a-doc-frontend --query 'taskArns[0]' --output text)
          
          if [ "$BACKEND_TASK" != "None" ] && [ "$FRONTEND_TASK" != "None" ]; then
            echo "Both services have running tasks!"
            echo "Backend task: $BACKEND_TASK"
            echo "Frontend task: $FRONTEND_TASK"
          else
            echo "Some services don't have running tasks yet"
            echo "Backend task: $BACKEND_TASK"
            echo "Frontend task: $FRONTEND_TASK"
          fi
          
          # Get service status
          echo ""
          echo "Service status:"
          aws ecs describe-services \
            --cluster book-a-doc-cluster \
            --services book-a-doc-backend book-a-doc-frontend \
            --query 'services[*].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount}' \
            --output table
          
          echo "Deployment completed!"
