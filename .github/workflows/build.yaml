name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com
  NODE_VERSION: 18

jobs:
  # Install dependencies
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Cache dependencies to speed up builds
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}

      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

  # Run tests
  test:
    runs-on: ubuntu-latest
    needs: install
    services:
      # MongoDB for testing
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore frontend cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}

      - name: Restore backend cache
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}

      # Frontend tests
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci
        env:
          CI: true

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint

      # Backend tests
      - name: Run backend tests
        run: |
          cd backend
          npm run test:ci
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test_db

      - name: Lint backend code
        run: |
          cd backend
          npm run lint

      # Save test results
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: |
            frontend/coverage/
            backend/coverage/

  # Security check (basic)
  security:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit on frontend
        run: |
          cd frontend
          npm audit --audit-level high --production || echo "Audit completed with warnings"

      - name: Run npm audit on backend
        run: |
          cd backend
          npm audit --audit-level high --production || echo "Audit completed with warnings"

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Create repositories if they don't exist
      - name: Create ECR repositories
        run: |
          # Try to create frontend repository
          aws ecr create-repository --repository-name book-a-doc-frontend || echo "Frontend repo already exists"
          
          # Try to create backend repository
          aws ecr create-repository --repository-name book-a-doc-backend || echo "Backend repo already exists"

      # Create production environment file
      - name: Create production environment file
        run: |
          cd backend
          cat > .env.production << EOF
          NODE_ENV=production
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=3000
          EOF

      # Build frontend image
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/book-a-doc-frontend:latest .
          docker push $ECR_REGISTRY/book-a-doc-frontend:latest

      # Build backend image
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/book-a-doc-backend:latest .
          docker push $ECR_REGISTRY/book-a-doc-backend:latest

      - name: Build success
        run: |
          echo "Build completed successfully!"
          echo "Frontend image: $ECR_REGISTRY/book-a-doc-frontend:latest"
          echo "Backend image: $ECR_REGISTRY/book-a-doc-backend:latest"
          